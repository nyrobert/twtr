#!/bin/bash
#
# Simple command line application for Twitter.

readonly config_file=./.config
readonly api_version="1.1"

load_config() {
  if [[ -f "${config_file}" ]] && [[ -r "${config_file}" ]]; then
    . "${config_file}"

    check_config

    readonly consumer_key
    readonly consuner_secret
    readonly access_token
    readonly access_secret
  else
    error_handler "Config file not found"
  fi
}

check_config() {
  if [[ -z "${consumer_key}" ]]; then
    error_handler "Consumer key (API key) not found"
  elif [[ -z "${consumer_secret}" ]]; then
    error_handler "Consumer secret (API secret) not found"
  elif [[ -z "${access_token}" ]]; then
    error_handler "Access token not found"
  elif [[ -z "${access_secret}" ]]; then
    error_handler "Access secret not found"
  fi
}

display_timeline() {
  declare -A request_params

  local request_params

  request_params["method"]="GET"
  request_params["url"]="https://api.twitter.com/${api_version}/statuses/home_timeline.json"
  request_params["count"]=5

  make_api_request "$(declare -p request_params)"
}

make_api_request() {
  eval "declare -A request_params=${1#*=}"

  local request_params

  # cURL call

  echo $(generate_oauth_header "$(declare -p request_params)")
}

generate_oauth_header() {
  eval "declare -A request_params=${1#*=}"

  oauth_params=$(collect_oauth_params)
  eval "declare -A oauth_params=${oauth_params#*=}"

  local request_params
  local oauth_params
  local oauth_str

  oauth_params["oauth_signature"]=$(generate_oauth_signature \
    "$(declare -p request_params)" \
    "$(declare -p oauth_params)" \
  )

  oauth_str=$(generate_oauth_str "$(declare -p oauth_params)" "\""  ", ")

  echo "Authorization: OAuth ${oauth_str}"
}

collect_oauth_params() {
  declare -A params

  local params
  local signature_method="HMAC-SHA1"
  local version="1.0"

  params["oauth_consumer_key"]="${consumer_key}"
  params["oauth_nonce"]=$(generate_oauth_nonce)
  params["oauth_signature_method"]="${signature_method}"
  params["oauth_timestamp"]=$(date +%s)
  params["oauth_token"]="${access_token}"
  params["oauth_version"]="${version}"

  echo $(declare -p params)
}

generate_oauth_signature() {
  declare -A signature_params

  eval "declare -A request_params=${1#*=}"
  eval "declare -A oauth_params=${2#*=}"

  local request_params
  local oauth_params
  local signature_params
  local signature_str
  local signing_key
  local key

  for key in "${!request_params[@]}"; do
    if [[ "${key}" != "method" ]] && [[ "${key}" != "url" ]]; then
      signature_params["${key}"]="${request_params[$key]}"
    fi
  done

  for key in "${!oauth_params[@]}"; do
    signature_params["${key}"]="${oauth_params[$key]}"
  done

  signature_str=$(generate_oauth_str "$(declare -p signature_params)" ""  "&")
  signature_str=$(printf "%s&%s&%s" \
    "${request_params[method]}" \
    $(percent_encode "${request_params[url]}") \
    $(percent_encode "${signature_str}") \
  )

  signing_key=$(printf "%s&%s" \
    $(percent_encode "${consumer_secret}") \
    $(percent_encode "${access_secret}") \
  )

  echo -n "${signature_str}" \
    | openssl dgst -sha1 -hmac "${signing_key}" -binary \
    | base64
}


generate_oauth_str() {
  eval "declare -A params=${1#*=}"

  local i=0
  local key
  local key_encoded
  local value_encoded
  local params
  local params_keys
  local params_str

  for key in "${!params[@]}"; do
    params_keys["${i}"]="${key}"
    (( i++ ))
  done

  params_keys=($(printf '%s\n' "${params_keys[@]}" | sort))

  i=0

  for key in "${params_keys[@]}"; do
    (( i++ ))

    key_encoded=$(percent_encode "${key}")
    value_encoded=$(percent_encode "${params[$key]}")

    params_str+="${key_encoded}=$2${value_encoded}$2"

    if [[ "${i}" -ne "${#params_keys[@]}" ]]; then
      params_str+="$3"
    fi
  done

  echo "${params_str}"
}

generate_oauth_nonce() {
  echo $(date +%s | sha256sum | base64 | head -c 32)
}

# RFC 3986, Section 2.1.
# https://gist.github.com/cdown/1163649
percent_encode() {
  local length="${#1}"

  for (( i = 0; i < length; i++ )); do
    local c="${1:i:1}"
      case "${c}" in
        [a-zA-Z0-9.~_-]) printf "$c" ;;
        *) printf '%s' "${c}" | xxd -p -c1 |
          while read c; do printf '%%%s' "${c}"; done ;;
      esac
  done
}

error_handler() {
  echo "$1" >&2
  exit 1
}

main() {
  load_config
  display_timeline
}

main
